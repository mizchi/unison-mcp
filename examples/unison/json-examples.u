-- Advanced JSON examples using Unison JSON library

use lib.unison_json_1_3_5.core.Json
use lib.unison_json_1_3_5.core.Json.object

-- ========================================
-- JSON Building with Fluent API
-- ========================================

-- Build complex JSON using the fluent builder API
buildUserJson : Text -> Nat -> Boolean -> Json
buildUserJson name age isActive =
  object.empty
    |> object.addText "name" name
    |> object.addNat "age" age
    |> object.addBoolean "active" isActive
    |> object.add "preferences" (
      object.empty
        |> object.addText "theme" "dark"
        |> object.addBoolean "notifications" true
        |> object.addList "languages" [Json.text "en", Json.text "ja"]
    )
    |> object.addOptionalText "email" (if isActive then Some "user@example.com" else None)

-- ========================================
-- JSON Parsing and Validation
-- ========================================

-- Parse JSON from text
parseAndValidate : Text -> Either Text Json
parseAndValidate jsonText =
  match Json.catchFromText jsonText with
    Left err -> Left ("Parse error: " ++ Failure.toText err)
    Right json -> Right json

-- Safe JSON field extraction with type checking
getTypedField : Text -> (Json -> Optional a) -> Json -> Either Text a
getTypedField fieldName extractor json =
  match json with
    Json.Object fields ->
      match List.find (pair -> match pair with (k, _) -> k Text.== fieldName) fields with
        Some (_, value) ->
          match extractor value with
            Some result -> Right result
            None -> Left ("Field '" ++ fieldName ++ "' has wrong type")
        None -> Left ("Field '" ++ fieldName ++ "' not found")
    _ -> Left "Expected JSON object"

-- Extract text field
getTextFieldSafe : Text -> Json -> Either Text Text
getTextFieldSafe fieldName = getTypedField fieldName (json ->
  match json with
    Json.Text t -> Some t
    _ -> None
)

-- Extract number field
getNumberFieldSafe : Text -> Json -> Either Text Float
getNumberFieldSafe fieldName = getTypedField fieldName (json ->
  match json with
    Json.Number n -> Float.fromText n
    _ -> None
)

-- ========================================
-- JSON Transformation
-- ========================================

-- Transform all text values in a JSON structure
transformTexts : (Text -> Text) -> Json -> Json
transformTexts f json = match json with
  Json.Text t -> Json.text (f t)
  Json.Array items -> Json.array (List.map (transformTexts f) items)
  Json.Object fields -> 
    Json.object (List.map (pair -> 
      match pair with (k, v) -> (k, transformTexts f v)
    ) fields)
  other -> other

-- Filter JSON object fields
filterObject : (Text -> Boolean) -> Json -> Json
filterObject pred json = match json with
  Json.Object fields ->
    Json.object (List.filter (pair -> 
      match pair with (k, _) -> pred k
    ) fields)
  other -> other

-- ========================================
-- JSON Query DSL
-- ========================================

type JsonPath = 
  | Field Text JsonPath
  | Index Nat JsonPath
  | End

-- Query JSON using path
queryJson : JsonPath -> Json -> Optional Json
queryJson path json = match path with
  End -> Some json
  Field name rest -> 
    match json with
      Json.Object fields ->
        match List.find (p -> match p with (k, _) -> k Text.== name) fields with
          Some (_, value) -> queryJson rest value
          None -> None
      _ -> None
  Index idx rest ->
    match json with
      Json.Array items ->
        match List.at idx items with
          Some value -> queryJson rest value
          None -> None
      _ -> None

-- Path builder helpers
field : Text -> JsonPath -> JsonPath
field = Field

index : Nat -> JsonPath -> JsonPath
index = Index

end : JsonPath
end = End

-- ========================================
-- Practical MCP Examples
-- ========================================

-- Build MCP request using fluent API
buildMcpRequest : Text -> Float -> Text -> Optional [(Text, Json)] -> Json
buildMcpRequest jsonrpc id method params =
  let
    base = object.empty
      |> object.addText "jsonrpc" jsonrpc
      |> object.addFloat "id" id
      |> object.addText "method" method
  match params with
    Some p -> object.add "params" (Json.object p) base
    None -> base

-- Build MCP response with optional error
buildMcpResponse : Text -> Float -> Either (Float, Text) Json -> Json
buildMcpResponse jsonrpc id resultOrError =
  let
    base = object.empty
      |> object.addText "jsonrpc" jsonrpc
      |> object.addFloat "id" id
  match resultOrError with
    Right result -> object.add "result" result base
    Left (code, message) ->
      object.add "error" (
        object.empty
          |> object.addFloat "code" code
          |> object.addText "message" message
      ) base

-- Parse MCP request with validation
parseMcpRequest : Json -> Either Text (Text, Float, Text, Optional Json)
parseMcpRequest json = do
  jsonrpc <- getTextFieldSafe "jsonrpc" json
  id <- getNumberFieldSafe "id" json
  method <- getTextFieldSafe "method" json
  let params = match json with
    Json.Object fields ->
      match List.find (p -> match p with (k, _) -> k Text.== "params") fields with
        Some (_, v) -> Some v
        None -> None
    _ -> None
  Right (jsonrpc, id, method, params)

-- ========================================
-- JSON Schema Validation
-- ========================================

type JsonType = TextType | NumberType | BooleanType | ArrayType | ObjectType | NullType

validateType : JsonType -> Json -> Boolean
validateType expectedType json = match (expectedType, json) with
  (TextType, Json.Text _) -> true
  (NumberType, Json.Number _) -> true
  (BooleanType, Json.Boolean _) -> true
  (ArrayType, Json.Array _) -> true
  (ObjectType, Json.Object _) -> true
  (NullType, Json.Null) -> true
  _ -> false

-- Validate object against simple schema
type ObjectSchema = [(Text, JsonType, Boolean)] -- (field, type, required)

validateObject : ObjectSchema -> Json -> Either Text ()
validateObject schema json = match json with
  Json.Object fields ->
    let
      checkField : (Text, JsonType, Boolean) -> Either Text ()
      checkField (fieldName, fieldType, required) =
        match List.find (p -> match p with (k, _) -> k Text.== fieldName) fields with
          Some (_, value) ->
            if validateType fieldType value
              then Right ()
              else Left ("Field '" ++ fieldName ++ "' has wrong type")
          None ->
            if required
              then Left ("Required field '" ++ fieldName ++ "' is missing")
              else Right ()
      
      results = List.map checkField schema
      errors = List.filterMap (either -> match either with
        Left err -> Some err
        Right _ -> None
      ) results
    
    if List.isEmpty errors
      then Right ()
      else Left (Text.join ", " errors)
  _ -> Left "Expected JSON object"

-- Example schema for MCP request
mcpRequestSchema : ObjectSchema
mcpRequestSchema = [
  ("jsonrpc", TextType, true),
  ("id", NumberType, true),
  ("method", TextType, true),
  ("params", ObjectType, false)
]